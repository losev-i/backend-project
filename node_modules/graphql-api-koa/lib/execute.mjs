import { Source, parse, validate, execute as executeGraphQL } from 'graphql'
import { checkOptions } from './checkOptions'
import { checkSchema } from './checkSchema'
import { createHttpError } from './createHttpError'
import { isPlainObject } from './isPlainObject'
export const execute = options => {
  if (typeof options === 'undefined')
    throw createHttpError('GraphQL execute middleware options missing.')
  if (!isPlainObject(options))
    throw createHttpError(
      'GraphQL execute middleware options must be an object.'
    )
  const ALLOWED_OPTIONS = [
    'schema',
    'rootValue',
    'contextValue',
    'fieldResolver',
    'override'
  ]
  checkOptions(options, ALLOWED_OPTIONS, 'GraphQL execute middleware')
  if (typeof options.schema !== 'undefined') checkSchema(options.schema)
  if (
    typeof options.override !== 'undefined' &&
    typeof options.override !== 'function'
  )
    throw createHttpError(
      'GraphQL execute middleware `override` option must be a function.'
    )
  return async (ctx, next) => {
    if (typeof ctx.request.body === 'undefined')
      throw createHttpError('Request body missing.')
    if (!isPlainObject(ctx.request.body))
      throw createHttpError(400, 'Request body must be a JSON object.')
    if (!('query' in ctx.request.body))
      throw createHttpError(400, 'GraphQL operation field `query` missing.')
    let document

    try {
      document = parse(new Source(ctx.request.body.query))
    } catch (error) {
      throw createHttpError(400, `GraphQL query syntax error: ${error.message}`)
    }

    let optionsOverride = {}

    if (options.override) {
      optionsOverride = await options.override(ctx)
      if (!isPlainObject(optionsOverride))
        throw createHttpError(
          'GraphQL execute middleware options must be an object, or an object promise.'
        )
      checkOptions(
        optionsOverride,
        ALLOWED_OPTIONS.filter(option => option !== 'override'),
        'GraphQL execute middleware `override` option return'
      )
      if (typeof optionsOverride.schema !== 'undefined')
        checkSchema(optionsOverride.schema)
    }

    const execute = {
      ...options,
      ...optionsOverride
    }
    const queryValidationErrors = validate(execute.schema, document)
    if (queryValidationErrors.length)
      throw createHttpError(400, 'GraphQL query validation errors.', {
        graphqlErrors: queryValidationErrors
      })
    let result

    try {
      result = await executeGraphQL({
        ...execute,
        document,
        variableValues: ctx.request.body.variables,
        operationName: ctx.request.body.operationName
      })
    } catch (error) {
      throw createHttpError(
        400,
        `GraphQL operation field invalid: ${error.message}`
      )
    }

    if (result.data)
      ctx.response.body = {
        data: result.data
      }
    if (result.errors)
      throw createHttpError(200, 'GraphQL errors.', {
        graphqlErrors: result.errors
      })
    ctx.response.status = 200
    await next()
  }
}
