import { Context } from 'koa';
import { BaseStore } from './stores';
/** Augmentation of koa */
declare module 'koa' {
    interface Context {
        sessionId?: any;
        sessionStore: BaseStore;
        session: Session;
        sessionSave: boolean;
        regenerateSession: () => Session;
    }
}
/** Session */
export interface Cookie {
    expires?: Date;
    maxAge?: number;
    httpOnly?: boolean;
    overwrite?: boolean;
    path?: string;
    secure?: boolean;
    signed: boolean;
}
export interface Session {
    cookie: Cookie;
}
export interface SessionOptions {
    key?: string;
    store?: BaseStore;
    reconnectTimeout?: number;
    cookieOptions?: Cookie;
    defer?: boolean;
    rolling?: boolean;
    allowEmpty?: boolean;
    genSid?: (ctx: Context, length: number) => string;
    errorHandler?: (err: Error, type: string, ctx: Context) => void;
    valid?: (ctx: Context, session: Session) => boolean;
    beforeSave?: (ctx: Context, session: Session) => void;
}
/**
 * setup session store with the given `options`
 *
 * @export
 * @param {SessionOptions} [options={}]
 *   - [`key`] cookie name, defaulting to `koa.sid`
 *   - [`store`] session store instance, default is a MemoryStore
 *   - [`reconnectTimeout`] store reconnectTimeout in `ms`, default is oneday
 *   - [`cookieOptions`] session cookie settings, default is { signed: true}
 *   - [`defer`] defer get session, you should `await this.session` to get the session if
 *      defer is true, default is false
 *   - [`rolling`]  rolling session, always reset the cookie and sessions, default is false
 *   - [`allowEmpty`] allow session empty, default is false
 *   - [`genSid`] you can use your own generator for sid
 *   - [`errorHandler`] handler for session store get or set error
 *   - [`valid`] valid(ctx, session), valid session value before use it
 *   - [`beforeSave`] beforeSave(ctx, session), hook before save session
 * @returns
 */
export default function sessionFactory(options?: SessionOptions): (ctx: Context, next: any) => Promise<any>;
export { BaseStore, MemoryStore, CONNECT, DISCONNECT } from './stores';
