{"version":3,"sources":["../../src/Container.ts"],"names":[],"mappings":"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","file":"Container.js","sourcesContent":["import {ContainerInstance} from \"./ContainerInstance\";\nimport {Token} from \"./Token\";\nimport {Handler} from \"./types/Handler\";\nimport {ObjectType} from \"./types/ObjectType\";\nimport {ServiceIdentifier} from \"./types/ServiceIdentifier\";\nimport {ServiceMetadata} from \"./types/ServiceMetadata\";\n\n/**\n * Service container.\n */\nexport class Container {\n\n    // -------------------------------------------------------------------------\n    // Private Static Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Global container instance.\n     */\n    private static readonly globalInstance: ContainerInstance = new ContainerInstance(undefined);\n\n    /**\n     * Other containers created using Container.of method.\n     */\n    private static readonly instances: ContainerInstance[] = [];\n\n    /**\n     * All registered handlers.\n     */\n    static readonly handlers: Handler[] = [];\n\n    // -------------------------------------------------------------------------\n    // Public Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets a separate container instance for the given instance id.\n     */\n    static of(instanceId: any): ContainerInstance {\n        if (instanceId === undefined)\n            return this.globalInstance;\n\n        let container = this.instances.find(instance => instance.id === instanceId);\n        if (!container) {\n            container = new ContainerInstance(instanceId);\n            this.instances.push(container);\n        }\n\n        return container;\n    }\n\n    /**\n     * Checks if the service with given name or type is registered service container.\n     * Optionally, parameters can be passed in case if instance is initialized in the container for the first time.\n     */\n    static has<T>(type: ObjectType<T>): boolean;\n\n    /**\n     * Checks if the service with given name or type is registered service container.\n     * Optionally, parameters can be passed in case if instance is initialized in the container for the first time.\n     */\n    static has<T>(id: string): boolean;\n\n    /**\n     * Checks if the service with given name or type is registered service container.\n     * Optionally, parameters can be passed in case if instance is initialized in the container for the first time.\n     */\n    static has<T>(id: Token<T>): boolean;\n\n    /**\n     * Checks if the service with given name or type is registered service container.\n     * Optionally, parameters can be passed in case if instance is initialized in the container for the first time.\n     */\n    static has<T>(identifier: ServiceIdentifier): boolean {\n        return this.globalInstance.has(identifier as any);\n    }\n\n    /**\n     * Retrieves the service with given name or type from the service container.\n     * Optionally, parameters can be passed in case if instance is initialized in the container for the first time.\n     */\n    static get<T>(type: ObjectType<T>): T;\n\n    /**\n     * Retrieves the service with given name or type from the service container.\n     * Optionally, parameters can be passed in case if instance is initialized in the container for the first time.\n     */\n    static get<T>(id: string): T;\n\n    /**\n     * Retrieves the service with given name or type from the service container.\n     * Optionally, parameters can be passed in case if instance is initialized in the container for the first time.\n     */\n    static get<T>(id: Token<T>): T;\n\n    /**\n     * Retrieves the service with given name or type from the service container.\n     * Optionally, parameters can be passed in case if instance is initialized in the container for the first time.\n     */\n    static get<T>(service: { service: T }): T;\n\n    /**\n     * Retrieves the service with given name or type from the service container.\n     * Optionally, parameters can be passed in case if instance is initialized in the container for the first time.\n     */\n    static get<T>(identifier: ServiceIdentifier<T>): T {\n        return this.globalInstance.get(identifier as any);\n    }\n\n    /**\n     * Gets all instances registered in the container of the given service identifier.\n     * Used when service defined with multiple: true flag.\n     */\n    static getMany<T>(id: string): T[];\n\n    /**\n     * Gets all instances registered in the container of the given service identifier.\n     * Used when service defined with multiple: true flag.\n     */\n    static getMany<T>(id: Token<T>): T[];\n\n    /**\n     * Gets all instances registered in the container of the given service identifier.\n     * Used when service defined with multiple: true flag.\n     */\n    static getMany<T>(id: string|Token<T>): T[] {\n        return this.globalInstance.getMany(id as any);\n    }\n\n    /**\n     * Sets a value for the given type or service name in the container.\n     */\n    static set<T, K extends keyof T>(service: ServiceMetadata<T, K>): Container;\n\n    /**\n     * Sets a value for the given type or service name in the container.\n     */\n    static set(type: Function, value: any): Container;\n\n    /**\n     * Sets a value for the given type or service name in the container.\n     */\n    static set(name: string, value: any): Container;\n\n    /**\n     * Sets a value for the given type or service name in the container.\n     */\n    static set(token: Token<any>, value: any): Container;\n\n    /**\n     * Sets a value for the given type or service name in the container.\n     */\n    static set<T, K extends keyof T>(values: ServiceMetadata<T, K>[]): Container;\n\n    /**\n     * Sets a value for the given type or service name in the container.\n     */\n    static set(identifierOrServiceMetadata: ServiceIdentifier|ServiceMetadata<any, any>|(ServiceMetadata<any, any>[]), value?: any): Container {\n        this.globalInstance.set(identifierOrServiceMetadata as any, value);\n        return this;\n    }\n\n    /**\n     * Removes services with a given service identifiers (tokens or types).\n     */\n    static remove(...ids: ServiceIdentifier[]): Container {\n        this.globalInstance.remove(...ids);\n        return this;\n    }\n\n    /**\n     * Completely resets the container by removing all previously registered services and handlers from it.\n     */\n    static reset(containerId?: any): Container {\n        if (containerId) {\n            const instance = this.instances.find(instance => instance.id === containerId);\n            if (instance) {\n                instance.reset();\n                this.instances.splice(this.instances.indexOf(instance), 1);\n            }\n\n        } else {\n            this.globalInstance.reset();\n            this.instances.forEach(instance => instance.reset());\n        }\n        return this;\n    }\n\n    /**\n     * Registers a new handler.\n     */\n    static registerHandler(handler: Handler): Container {\n        this.handlers.push(handler);\n        return this;\n    }\n\n    /**\n     * Helper method that imports given services.\n     */\n    static import(services: Function[]): Container {\n        return this;\n    }\n\n}\n"],"sourceRoot":"."}