{"version":3,"sources":["../../src/decorators/Inject.ts"],"names":[],"mappings":";;AAAA,0CAAuC;AACvC,kCAA+B;AAC/B,gEAA6D;AAiB7D;;GAEG;AACH,gBAAuB,UAAyD;IAC5E,OAAO,UAAS,MAAc,EAAE,YAAoB,EAAE,KAAc;QAEhE,IAAI,CAAC,UAAU;YACX,UAAU,GAAG,cAAM,OAAC,OAAe,CAAC,WAAW,CAAC,aAAa,EAAE,MAAM,EAAE,YAAY,CAAC,EAAjE,CAAiE,CAAC;QAEzF,qBAAS,CAAC,eAAe,CAAC;YACtB,MAAM,EAAE,MAAM;YACd,YAAY,EAAE,YAAY;YAC1B,KAAK,EAAE,KAAK;YACZ,KAAK,EAAE,UAAA,iBAAiB;gBACpB,IAAI,UAAe,CAAC;gBACpB,IAAI,OAAO,UAAU,KAAK,QAAQ,EAAE;oBAChC,UAAU,GAAG,UAAU,CAAC;iBAE3B;qBAAM,IAAI,UAAU,YAAY,aAAK,EAAE;oBACpC,UAAU,GAAG,UAAU,CAAC;iBAE3B;qBAAM;oBACH,UAAU,GAAG,UAAU,EAAE,CAAC;iBAC7B;gBAED,IAAI,UAAU,KAAK,MAAM;oBACrB,MAAM,IAAI,qCAAiB,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;gBAEtD,OAAO,iBAAiB,CAAC,GAAG,CAAM,UAAU,CAAC,CAAC;YAClD,CAAC;SACJ,CAAC,CAAC;IACP,CAAC,CAAC;AACN,CAAC;AA7BD,wBA6BC","file":"Inject.js","sourcesContent":["import {Container} from \"../Container\";\nimport {Token} from \"../Token\";\nimport {CannotInjectError} from \"../error/CannotInjectError\";\n\n/**\n * Injects a service into a class property or constructor parameter.\n */\nexport function Inject(type?: (type?: any) => Function): Function;\n\n/**\n * Injects a service into a class property or constructor parameter.\n */\nexport function Inject(serviceName?: string): Function;\n\n/**\n * Injects a service into a class property or constructor parameter.\n */\nexport function Inject(token: Token<any>): Function;\n\n/**\n * Injects a service into a class property or constructor parameter.\n */\nexport function Inject(typeOrName?: ((type?: any) => Function)|string|Token<any>): Function {\n    return function(target: Object, propertyName: string, index?: number) {\n\n        if (!typeOrName)\n            typeOrName = () => (Reflect as any).getMetadata(\"design:type\", target, propertyName);\n\n        Container.registerHandler({\n            object: target,\n            propertyName: propertyName,\n            index: index,\n            value: containerInstance => {\n                let identifier: any;\n                if (typeof typeOrName === \"string\") {\n                    identifier = typeOrName;\n\n                } else if (typeOrName instanceof Token) {\n                    identifier = typeOrName;\n\n                } else {\n                    identifier = typeOrName();\n                }\n\n                if (identifier === Object)\n                    throw new CannotInjectError(target, propertyName);\n\n                return containerInstance.get<any>(identifier);\n            }\n        });\n    };\n}\n"],"sourceRoot":".."}